Goal:
- funktionierendes Modell
- cli
- vll. App

Project structure:
> modelling
    > training
    > visualization
    > checkpoints
> src
    > melanoma_classification
        > cli 
        > model

Requirements:
- App structure
- Support different Classifier Networks
- Visualize Attention


Questions:
- Init class token not randomly
- Use CNNs when tokenized
- Fixed Backbone during finetuning on other tasks or continuous training better?
- Combined training across different classifiers/tasks with same backbone instead of layered training?



1. Training: 2 Klassen
2. Training: 3 Klassen -> bauen auf Backbone von 1. Training auf, Classifier ist neu
3. Training: 4 Klassen -> bauen auf Backbone von 2. Training auf, Classifier ist neu


Backbone von 3. Training mit Classifier von 1. Training

Make Model Great Again:
- deactivat dropout

Todos:
1. Check predictions
2. Increase Classifier Complexity
3. Learning Rate (different learning rates)
4. Sequentielles unfreezes
5. Different Scheduler
from torch.optim.lr_scheduler import ReduceLROnPlateau
scheduler = ReduceLROnPlateau(optimizer, mode='min', patience=3, factor=0.1)

If Works:
- store complete weights